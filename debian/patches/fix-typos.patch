Description: Fix several typos.
Author: Doug Torrance <dtorrance@debian.org>
Forwarded: https://github.com/algebraic-solving/msolve/pull/41
Last-Update: 2023-04-19

--- a/src/msolve/iofiles.c
+++ b/src/msolve/iofiles.c
@@ -1030,7 +1030,7 @@
   for(int32_t i = 0; i < pol->length; i++){
     mpz_init(pol->coeffs[i]);
     if(!mpz_inp_raw(pol->coeffs[i], file)){
-      fprintf(stderr, "An error occured when reading file (i=%d)\n", i);
+      fprintf(stderr, "An error occurred when reading file (i=%d)\n", i);
       exit(1);
     }
   }
@@ -1047,7 +1047,7 @@
   for(int32_t i = 0; i < pol->length; i++){
     mpz_init(pol->coeffs[i]);
     if(!mpz_inp_str(pol->coeffs[i], file, 10)){
-      fprintf(stderr, "An error occured when reading file (i=%d)\n", i);
+      fprintf(stderr, "An error occurred when reading file (i=%d)\n", i);
       exit(1);
     }
   }
--- a/src/msolve/main.c
+++ b/src/msolve/main.c
@@ -105,7 +105,7 @@
   fprintf(stdout, "         Default is 0. For a detailed description of the output\n");
   fprintf(stdout, "         format please see the general output data format section\n");
   fprintf(stdout, "         above.\n");
-  fprintf(stdout, "-q Q     Uses signature-based algotithms.\n");
+  fprintf(stdout, "-q Q     Uses signature-based algorithms.\n");
   fprintf(stdout, "         Default: 0 (no).\n");
   fprintf(stdout, "-r RED   Reduce Groebner basis.\n");
   fprintf(stdout, "         Default: 1 (yes).\n");
--- a/src/neogb/stat.c
+++ b/src/neogb/stat.c
@@ -87,7 +87,7 @@
         fprintf(file, "basis hash table resetting  %6d\n", st->reset_ht);
     }
     fprintf(file, "linear algebra option  %11d\n", st->laopt);
-    fprintf(file, "intial hash table size %11lu (2^%d)\n",
+    fprintf(file, "initial hash table size %11lu (2^%d)\n",
             (unsigned long)pow(2,st->init_hts), st->init_hts);
     if (st->mnsel == 2147483647) {
         fprintf(file, "max pair selection             ALL\n");
--- a/src/usolve/tests.c
+++ b/src/usolve/tests.c
@@ -636,7 +636,7 @@
   initialize_flags(flags);
 
   initialize_heap_flags(flags, deg);
-  fprintf(stderr, "Time for intialization = %f\n", realtime()-t);
+  fprintf(stderr, "Time for initialization = %f\n", realtime()-t);
   mpz_random_dense_poly(pol1, deg, nbits);
   //  USOLVEmpz_poly_print_maple(pol1, deg);
 
